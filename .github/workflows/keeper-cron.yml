name: Conxian Keeper & Autonomics

on:
  schedule:
    # Run every 10 minutes during active hours (9 AM - 9 PM UTC)
    - cron: '*/10 9-21 * * *'
    # Run every hour during off hours
    - cron: '0 22,23,0,1,2,3,4,5,6,7,8 * * *'
  workflow_dispatch:
    inputs:
      force_execution:
        description: 'Force execution regardless of conditions'
        required: false
        default: false
        type: boolean
      target_network:
        description: 'Target network for operations'
        required: false
        default: 'mainnet'
        type: choice
        options:
        - mainnet
        - testnet

env:
  NETWORK: ${{ github.event.inputs.target_network != '' && github.event.inputs.target_network || 'mainnet' }}
  FORCE_EXECUTION: ${{ github.event.inputs.force_execution != '' && github.event.inputs.force_execution || 'false' }}

jobs:
  # Pre-flight Health Check
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      network-status: ${{ steps.health.outputs.network-status }}
      vault-status: ${{ steps.health.outputs.vault-status }}
      treasury-status: ${{ steps.health.outputs.treasury-status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          npm ci --no-audit --no-fund
          python -m pip install --upgrade pip requests

      - name: Health Check
        id: health
        run: |
          echo "🏥 Running system health check..."
          
          # Network connectivity check
          if curl -s "https://api.hiro.so/v1/info" > /dev/null; then
            echo "network-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "network-status=degraded" >> $GITHUB_OUTPUT
          fi
          
          # Vault status check (read-only)
          if bash scripts/oracle_ops.sh health-check > health.log 2>&1; then
            echo "vault-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "vault-status=degraded" >> $GITHUB_OUTPUT
          fi
          
          # Treasury status check
          if bash scripts/monitor-health.sh &> treasury.log; then
            echo "treasury-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "treasury-status=degraded" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Health check completed"

      - name: Upload Health Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-reports-${{ github.run_number }}
          path: |
            stacks/health.log
            treasury.log
          retention-days: 7

  # Autonomics and Rebalancing
  autonomics:
    name: Autonomics & Rebalancing
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [health-check]
    if: needs.health-check.outputs.network-status == 'healthy'
    strategy:
      fail-fast: false
      matrix:
        operation:
          - name: "Market Analysis"
            script: "python scripts/ml_strategy_recommender.py"
            timeout: 5
          - name: "Vault Rebalancing"
            script: "npm run update-autonomics"
            timeout: 10
          - name: "DAO Proposals"
            script: "python scripts/governance_proposal_builder.py"
            timeout: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          npm ci --no-audit --no-fund
          python -m pip install --upgrade pip requests numpy pandas scikit-learn

      - name: Setup Environment
        run: |
          echo "🔧 Setting up ${{ matrix.operation.name }} environment..."
          
          # Create secure environment variables
          echo "NETWORK=${{ env.NETWORK }}" >> $GITHUB_ENV
          echo "OPERATION_MODE=automated" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

      - name: Execute ${{ matrix.operation.name }}
        timeout-minutes: ${{ matrix.operation.timeout }}
        env:
          STACKS_PRIVKEY: ${{ secrets.STACKS_PRIVKEY || 'unset' }}
          VAULT_CONTRACT: ${{ secrets.VAULT_CONTRACT_ADDRESS || 'unset' }}
        run: |
          echo "🤖 Executing ${{ matrix.operation.name }}..."
          
          # Set up logging
          LOG_FILE="${{ matrix.operation.name }}-$(date -u +%Y%m%d_%H%M%S).log"
          
          # Execute with comprehensive logging
          if ${{ matrix.operation.script }} 2>&1 | tee "$LOG_FILE"; then
            echo "✅ ${{ matrix.operation.name }} completed successfully"
            echo "operation-status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ ${{ matrix.operation.name }} failed"
            echo "operation-status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload Operation Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autonomics-logs-${{ matrix.operation.name }}-${{ github.run_number }}
          path: "*.log"
          retention-days: 14

  # Watchdog and Monitoring
  watchdog:
    name: Keeper Watchdog
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [health-check, autonomics]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas

      - name: Run Watchdog
        run: |
          echo "🐕 Running keeper watchdog..."
          
          # Create comprehensive monitoring report
          python scripts/keeper_watchdog.py \
            --network ${{ env.NETWORK }} \
            --health-status "${{ needs.health-check.outputs.vault-status }}" \
            --autonomics-status "${{ needs.autonomics.result }}" \
            --report-file watchdog-report.json

      - name: Validate Operations
        run: |
          echo "🔍 Validating keeper operations..."
          
          python -c "
          import json
          import sys
          
          try:
              with open('watchdog-report.json') as f:
                  report = json.load(f)
              
              # Check critical metrics
              if report.get('critical_alerts', []):
                  print('🚨 Critical alerts detected!')
                  for alert in report['critical_alerts']:
                      print(f'  - {alert}')
                  sys.exit(1)
              
              if report.get('warnings', []):
                  print('⚠️ Warnings detected:')
                  for warning in report['warnings']:
                      print(f'  - {warning}')
              
              print('✅ All validations passed')
              
          except Exception as e:
              print(f'❌ Validation failed: {e}')
              sys.exit(1)
          "

      - name: Upload Watchdog Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: watchdog-report-${{ github.run_number }}
          path: watchdog-report.json
          retention-days: 30

  # Emergency Response
  emergency-response:
    name: Emergency Response
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [health-check, autonomics, watchdog]
    if: failure() || needs.health-check.outputs.vault-status == 'degraded'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Emergency Protocols
        run: |
          echo "🚨 Emergency protocols activated!"
          
          # Log emergency state
          echo "Emergency triggered at: $(date -u)" > emergency.log
          echo "Trigger reason: System health degraded or operation failed" >> emergency.log
          echo "Network: ${{ env.NETWORK }}" >> emergency.log
          echo "Health status: ${{ needs.health-check.outputs.vault-status }}" >> emergency.log
          
          # Implement emergency response
          echo "📞 Emergency response procedures:"
          echo "1. System monitoring intensified"
          echo "2. Automated operations paused"
          echo "3. Manual review required"
          echo "4. Notifications sent to administrators"

      - name: Upload Emergency Log
        uses: actions/upload-artifact@v4
        with:
          name: emergency-log-${{ github.run_number }}
          path: emergency.log
          retention-days: 90

  # Summary and Reporting
  summary:
    name: Keeper Summary
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [health-check, autonomics, watchdog]
    if: always()
    steps:
      - name: Generate Summary Report
        run: |
          echo "## 🤖 Conxian Keeper Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** ${{ env.NETWORK }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### System Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Network | ${{ needs.health-check.outputs.network-status == 'healthy' && '🟢 Healthy' || '🔴 Degraded' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Vault | ${{ needs.health-check.outputs.vault-status == 'healthy' && '🟢 Healthy' || '🔴 Degraded' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Treasury | ${{ needs.health-check.outputs.treasury-status == 'healthy' && '🟢 Healthy' || '🔴 Degraded' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Autonomics | ${{ needs.autonomics.result == 'success' && '🟢 Success' || '🔴 Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Watchdog | ${{ needs.watchdog.result == 'success' && '🟢 Active' || '🔴 Issues' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.health-check.outputs.network-status }}" == "healthy" && 
                "${{ needs.autonomics.result }}" == "success" ]]; then
            echo "### ✅ All systems operational" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Issues detected - Review required" >> $GITHUB_STEP_SUMMARY
          fi
