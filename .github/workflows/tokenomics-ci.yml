name: Conxian Enhanced Tokenomics CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'contracts/**'
      - 'tests/**'
      - 'scripts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'contracts/**'
      - 'tests/**'
      - 'scripts/**'

env:
  CLARINET_VERSION: "2.8.0"
  NODE_VERSION: "18"

jobs:
  # =============================================================================
  # LINT AND FORMAT CHECKS
  # =============================================================================
  lint-and-format:
    runs-on: ubuntu-latest
    name: Lint and Format Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Clarinet
      run: |
        curl -L https://github.com/hirosystems/clarinet/releases/download/v${{ env.CLARINET_VERSION }}/clarinet-linux-x64-glibc.tar.gz | tar xz
        sudo mv clarinet /usr/local/bin/
        
    - name: Verify Clarinet installation
      run: clarinet --version
      
    - name: Check Clarity syntax
      run: clarinet check
      
    - name: Run contract analysis
      run: clarinet analyze --costs
      
    - name: Lint documentation
      run: |
        npm install -g markdownlint-cli
        markdownlint documentation/**/*.md || true

  # =============================================================================
  # UNIT TESTS
  # =============================================================================
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Install Clarinet
      run: |
        curl -L https://github.com/hirosystems/clarinet/releases/download/v${{ env.CLARINET_VERSION }}/clarinet-linux-x64-glibc.tar.gz | tar xz
        sudo mv clarinet /usr/local/bin/
        
    - name: Run Clarity unit tests
      run: |
        echo "Running tokenomics unit tests..."
        clarinet test tests/tokenomics-unit-tests.clar
        
    - name: Run TypeScript unit tests
      run: npm test
      
    - name: Generate test coverage report
      run: |
        npm run test:coverage || true
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Install Clarinet
      run: |
        curl -L https://github.com/hirosystems/clarinet/releases/download/v${{ env.CLARINET_VERSION }}/clarinet-linux-x64-glibc.tar.gz | tar xz
        sudo mv clarinet /usr/local/bin/
        
    - name: Start Clarinet devnet
      run: |
        clarinet devnet start &
        sleep 30
        
    - name: Run integration tests
      run: |
        echo "Running tokenomics integration tests..."
        clarinet test tests/tokenomics-integration-tests.clar
        
    - name: Run cross-contract interaction tests
      run: |
        echo "Testing cross-contract interactions..."
        npm run test:integration
        
    - name: Stop Clarinet devnet
      run: |
        pkill clarinet || true

  # =============================================================================
  # SYSTEM VALIDATION TESTS
  # =============================================================================
  system-validation:
    runs-on: ubuntu-latest
    name: System Validation Tests
    needs: integration-tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Install Clarinet
      run: |
        curl -L https://github.com/hirosystems/clarinet/releases/download/v${{ env.CLARINET_VERSION }}/clarinet-linux-x64-glibc.tar.gz | tar xz
        sudo mv clarinet /usr/local/bin/
        
    - name: Run system validation tests
      run: |
        echo "Running comprehensive system validation..."
        clarinet test tests/system-validation-tests.clar
        
    - name: Validate deployment readiness
      run: |
        echo "Validating deployment configuration..."
        ./scripts/deploy-tokenomics.sh simnet development true
        
    - name: Performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        npm run test:performance || true

  # =============================================================================
  # SECURITY ANALYSIS
  # =============================================================================
  security-analysis:
    runs-on: ubuntu-latest
    name: Security Analysis
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Clarinet
      run: |
        curl -L https://github.com/hirosystems/clarinet/releases/download/v${{ env.CLARINET_VERSION }}/clarinet-linux-x64-glibc.tar.gz | tar xz
        sudo mv clarinet /usr/local/bin/
        
    - name: Run security analysis
      run: |
        echo "Running Clarity security analysis..."
        clarinet analyze --costs --optimize
        
    - name: Check for common vulnerabilities
      run: |
        echo "Checking for common smart contract vulnerabilities..."
        # Add security scanning tools here
        grep -r "panic" contracts/ && echo "WARNING: panic found" || true
        grep -r "unwrap-panic" contracts/ && echo "WARNING: unwrap-panic found" || true
        
    - name: Audit contract complexity
      run: |
        echo "Analyzing contract complexity..."
        find contracts/ -name "*.clar" -exec wc -l {} + | sort -n

  # =============================================================================
  # DEPLOYMENT VALIDATION
  # =============================================================================
  deployment-validation:
    runs-on: ubuntu-latest
    name: Deployment Validation
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Clarinet
      run: |
        curl -L https://github.com/hirosystems/clarinet/releases/download/v${{ env.CLARINET_VERSION }}/clarinet-linux-x64-glibc.tar.gz | tar xz
        sudo mv clarinet /usr/local/bin/
        
    - name: Validate deployment scripts
      run: |
        echo "Validating deployment orchestration..."
        chmod +x scripts/deploy-tokenomics.sh
        ./scripts/deploy-tokenomics.sh simnet development true
        
    - name: Generate deployment artifacts
      run: |
        echo "Generating deployment artifacts..."
        mkdir -p artifacts/deployments
        clarinet deployments generate --low-cost --testnet
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: artifacts/deployments/
        retention-days: 30

  # =============================================================================
  # TESTNET DEPLOYMENT (on main branch)
  # =============================================================================
  testnet-deployment:
    runs-on: ubuntu-latest
    name: Testnet Deployment
    needs: [system-validation, deployment-validation]
    if: github.ref == 'refs/heads/main'
    environment: testnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Clarinet
      run: |
        curl -L https://github.com/hirosystems/clarinet/releases/download/v${{ env.CLARINET_VERSION }}/clarinet-linux-x64-glibc.tar.gz | tar xz
        sudo mv clarinet /usr/local/bin/
        
    - name: Configure testnet environment
      env:
        TESTNET_DEPLOYER_KEY: ${{ secrets.TESTNET_DEPLOYER_KEY }}
      run: |
        echo "Configuring testnet deployment..."
        # Configure deployment keys and settings
        
    - name: Deploy to testnet
      env:
        TESTNET_DEPLOYER_KEY: ${{ secrets.TESTNET_DEPLOYER_KEY }}
      run: |
        echo "Deploying to Stacks testnet..."
        ./scripts/deploy-tokenomics.sh testnet staging false
        
    - name: Verify testnet deployment
      run: |
        echo "Verifying testnet deployment..."
        # Add deployment verification steps

  # =============================================================================
  # NOTIFICATION AND REPORTING
  # =============================================================================
  notify-completion:
    runs-on: ubuntu-latest
    name: Notify Completion
    needs: [unit-tests, integration-tests, security-analysis]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' }}
      run: |
        echo "✅ All tokenomics tests passed successfully!"
        
    - name: Notify failure
      if: ${{ needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
      run: |
        echo "❌ Tokenomics tests failed. Check logs for details."
        exit 1
        
    - name: Generate test report
      run: |
        echo "Generating comprehensive test report..."
        # Add test report generation logic
