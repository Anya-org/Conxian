name: Conxian CI/CD Pipeline

on:
  push:
    branches: [ main, develop, enhancements ]
  pull_request:
    branches: [ main, develop, enhancements ]
  workflow_dispatch: {}

env:
  NODE_VERSION: '20'
  CLARINET_VERSION: '3.5.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install deps
        run: npm ci --no-audit --no-fund
      - name: Verify Clarinet Installation
        run: npx clarinet --version
      - name: Enforce Clarinet SDK version
        run: |
          set -e
          VER=$(npx --yes clarinet --version | awk '{print $2}')
          if [ "$VER" != "${{ env.CLARINET_VERSION }}" ]; then
            echo "Expected Clarinet ${{ env.CLARINET_VERSION }} but got $VER"
            exit 1
          fi
      - name: Contract Compilation
        run: npx clarinet check
      - name: Run Tests
        run: npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install deps
        run: npm ci --no-audit --no-fund
      - name: Verify Clarinet Installation
        run: npx clarinet --version
      - name: Package
        run: tar -czf conxian-deployment.tar.gz contracts/ Clarinet.toml deployments/ scripts/deploy-*.sh || true
      - uses: actions/upload-artifact@v4
        with:
          name: conxian-deployment-${{ github.sha }}
          path: conxian-deployment.tar.gz
          retention-days: 30

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    steps:
      - name: Pipeline Status Summary
        run: |
          echo "## 🚀 Conxian CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "### 🎉 All critical components passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Some components failed. Review required." >> $GITHUB_STEP_SUMMARY
          fi
